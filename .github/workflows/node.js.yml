# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: 
      - main
      - dev/client/client_main
      - dev/dev_main
  pull_request:
    branches: 
      - main
      - dev/client/client_main
      - dev/dev_main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12.2
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        # Start the postgres service in the background
        # before running the tests
        # The `healthcheck` option ensures that the service is healthy
        # before moving on to the next step
        # See: https://docs.docker.com/compose/compose-file/#healthcheck

      express:
        build:
          context: ./api
          dockerfile: Dockerfile
        ports:
          - 5001:5001
        volumes:
          - ./api:/usr/src/app
        # Start the express service in the background
        # before running the tests
        options: >-
          --health-cmd "curl -f http://localhost:5001/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        # The `entrypoint` option overrides the default `CMD` command
        # in the Dockerfile to start the service with `npm run start:dev`
        # The `healthcheck` option ensures that the service is healthy
        # before moving on to the next step

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and test
        run: |
          # Install dependencies and run tests
          cd ../client && npm install && npm test