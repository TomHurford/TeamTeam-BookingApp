// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//------------------//

model UserType {
  id   Int    @id @default(autoincrement())
  type String @unique
  user User[]
}

model User {
  id        Int         @id @default(autoincrement())
  name      String
  email     String      @unique
  password  String
  type      UserType    @relation(references: [id], fields: [userType])
  userType  Int
  committee Committee[]
  members   Members[]
  ticket    Ticket[]
  Purchase  Purchase[]
}

model Society {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  links       SocietyLinks[]
  // A society can have many committee members and a committee member can be in many societies
  committee   Committee[]
  members     Members[]
  events      Event[]
}

model SocietyLinks {
  id       Int     @id @default(autoincrement())
  society  Society @relation(references: [id], fields: [societyId])
  societyId Int
  instagram String?
  facebook  String?
  twitter   String?
  website   String?
  logo     String?
  banner   String?
}

model Committee {
  // Committe model should consist of a Composite Foreign Key of Society and User
  user      User    @relation(references: [id], fields: [userId])
  userId    Int
  society   Society @relation(references: [id], fields: [societyId])
  societyId Int
  role      String
  @@id([userId, societyId])
}

model Members {
  user      User    @relation(references: [id], fields: [userId])
  userId    Int
  society   Society @relation(references: [id], fields: [societyId])
  societyId Int
  @@id([userId, societyId])
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  date        DateTime
  location    String
  society     Society  @relation(references: [id], fields: [societyId])
  societyId   Int
  ticket      Ticket[]
}

model TicketType {
  id     Int      @id @default(autoincrement())
  type   String
  price  Int
  ticket Ticket[]
}

model Ticket {
  id           Int        @id @default(autoincrement())
  user         User       @relation(references: [id], fields: [userId])
  userId       Int
  event        Event      @relation(references: [id], fields: [eventId])
  eventId      Int
  ticketType   TicketType @relation(references: [id], fields: [ticketTypeId])
  ticketTypeId Int
  status       String
  Purchase     Purchase[]
}

model Purchase {
  id            Int      @id @default(autoincrement())
  user          User     @relation(references: [id], fields: [userId])
  userId        Int
  ticket        Ticket   @relation(references: [id], fields: [ticketId])
  ticketId      Int
  date          DateTime
  total         Int
  paymentMethod String
}
