// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//------------------//
model UserType {
  id    Int    @id @unique @default(autoincrement())
  type  String
  users User[]
}

model User {
  id            Int             @id @default(autoincrement())
  name          String
  email         String          @unique
  password      String
  userType      Int
  type          UserType        @relation(references: [id], fields: [userType])
  committee     Committee[]
  members       Members[]
  ticket        Ticket[]
  Purchase      Purchase[]
  verifications Verifications[]
}

model Society {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  email       String         @unique
  description String
  category    String
  isArchived  Boolean        @default(false)
  links       SocietyLinks[]
  // A society can have many committee members and a committee member can be in many societies
  committee   Committee[]
  members     Members[]
  events      Event[]
}

model SocietyLinks {
  id        Int     @id @default(autoincrement())
  instagram String?
  facebook  String?
  twitter   String?
  website   String?
  logo      String?
  banner    String?
  societyId Int     @unique
  society   Society @relation(references: [id], fields: [societyId])
}

model Committee {
  role        String
  userId      Int
  societyId   Int
  isPresident Boolean @default(false)
  user        User    @relation(references: [id], fields: [userId])
  society     Society @relation(references: [id], fields: [societyId])
  isArchived  Boolean @default(false)

  @@id([userId, societyId])
}

model Members {
  userId     Int
  societyId  Int
  user       User    @relation(references: [id], fields: [userId])
  society    Society @relation(references: [id], fields: [societyId])
  isArchived Boolean @default(false)

  @@id([userId, societyId])
}

model Event {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  date        DateTime
  location    String
  societyId   Int
  isArchived  Boolean      @default(false)
  society     Society      @relation(references: [id], fields: [societyId])
  ticket      Ticket[]
  ticketTypes TicketType[]
  purchase    Purchase[]
}

model TicketType {
  id         Int      @id @unique @default(autoincrement())
  ticketType String
  price      Int
  quantity   Int
  eventId    Int
  event      Event    @relation(references: [id], fields: [eventId])
  tickets    Ticket[]
  isArchived Boolean  @default(false)
}

model Ticket {
  id           Int        @id @unique @default(autoincrement())
  ticketData   String
  status       String     @default("PENDING")
  userId       Int
  eventId      Int
  ticketTypeId Int
  purchaseId   Int
  purchase     Purchase   @relation(references: [id], fields: [purchaseId])
  user         User       @relation(references: [id], fields: [userId])
  event        Event      @relation(references: [id], fields: [eventId])
  ticketType   TicketType @relation(references: [id], fields: [ticketTypeId])
  isArchived   Boolean    @default(false)
}

model Purchase {
  id            Int      @id @unique @default(autoincrement())
  date          DateTime @default(now())
  total         Int
  paymentMethod String
  status        String   @default("PENDING")
  userId        Int
  eventId       Int
  user          User     @relation(references: [id], fields: [userId])
  event         Event    @relation(references: [id], fields: [eventId])
  tickets       Ticket[]
  isArchived    Boolean  @default(false)
}

model Verifications {
  id               Int    @id @default(autoincrement())
  verificationType String
  verificationCode String
  userId           Int
  user             User   @relation(references: [id], fields: [userId])
}
