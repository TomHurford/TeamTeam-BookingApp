generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserType {
  id    Int    @id @unique @default(autoincrement())
  type  String
  users User[]
}

model User {
  id            Int             @id @default(autoincrement())
  name          String
  email         String          @unique
  password      String
  userType      Int
  committee     Committee[]
  members       Members[]
  Purchase      Purchase[]
  ticket        Ticket[]
  type          UserType        @relation(fields: [userType], references: [id])
  verifications Verifications[]
}

model Society {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  email       String            @unique
  description String
  isArchived  Boolean           @default(false)
  category    SocietyCategories @default(Other)
  committee   Committee[]
  events      Event[]
  members     Members[]
  links       SocietyLinks?
}

model SocietyLinks {
  id        Int     @id @default(autoincrement())
  instagram String?
  facebook  String?
  twitter   String?
  website   String?
  logo      String?
  banner    String?
  societyId Int     @unique
  society   Society @relation(fields: [societyId], references: [id])
}

model Committee {
  role        String
  userId      Int
  societyId   Int
  isArchived  Boolean @default(false)
  isPresident Boolean @default(false)
  society     Society @relation(fields: [societyId], references: [id])
  user        User    @relation(fields: [userId], references: [id])

  @@id([userId, societyId])
}

model Members {
  userId     Int
  societyId  Int
  isArchived Boolean @default(false)
  society    Society @relation(fields: [societyId], references: [id])
  user       User    @relation(fields: [userId], references: [id])

  @@id([userId, societyId])
}

model Event {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  date        DateTime
  location    String
  societyId   Int
  isArchived  Boolean      @default(false)
  banner      String       @default("https://images.unsplash.com/photo-1501281668745-f7f57925c3b4?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80")
  society     Society      @relation(fields: [societyId], references: [id])
  purchase    Purchase[]
  ticket      Ticket[]
  ticketTypes TicketType[]
}

model TicketType {
  id         Int      @id @unique @default(autoincrement())
  ticketType String
  price      Int
  quantity   Int
  eventId    Int
  isArchived Boolean  @default(false)
  tickets    Ticket[]
  event      Event    @relation(fields: [eventId], references: [id])
}

model Ticket {
  id           Int           @id @unique @default(autoincrement())
  ticketData   String
  userId       Int
  eventId      Int
  ticketTypeId Int
  purchaseId   Int
  isArchived   Boolean       @default(false)
  status       TICKET_STATUS @default(UNUSED)
  event        Event         @relation(fields: [eventId], references: [id])
  purchase     Purchase      @relation(fields: [purchaseId], references: [id])
  ticketType   TicketType    @relation(fields: [ticketTypeId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
}

model Purchase {
  id            Int             @id @unique @default(autoincrement())
  date          DateTime        @default(now())
  total         Int
  paymentMethod String
  userId        Int
  eventId       Int
  isArchived    Boolean         @default(false)
  status        PURCHASE_STATUS @default(PENDING)
  event         Event           @relation(fields: [eventId], references: [id])
  user          User            @relation(fields: [userId], references: [id])
  tickets       Ticket[]
}

model Verifications {
  id               Int    @id @default(autoincrement())
  verificationType String
  verificationCode String
  userId           Int
  user             User   @relation(fields: [userId], references: [id])
}

enum TICKET_STATUS {
  UNUSED
  USED
}

enum PURCHASE_STATUS {
  PENDING
  PAID
  REFUNDED
}

enum SocietyCategories {
  Sports
  Academic
  Social
  Other
}
